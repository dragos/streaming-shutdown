/**
 * Based on Spark examples, StatefulNetworkWordCount.
 */

package test

import org.apache.spark.SparkConf
import org.apache.spark.HashPartitioner
import org.apache.spark.streaming._
import org.apache.spark.rdd.RDD
import org.apache.spark.streaming.dstream.DStream
import scala.collection.mutable.ListBuffer

/**
 * A simple class to implement graceful shutdown, in particular saving RDDs before the application
 * stops. A typical use-case is version upgrades: a long-running streaming application goes down
 * for a version upgrade, but the state (from `updateStateByKey`) should not be lost. This class
 * registers DStreams and won't call `ssc.stop` until all streams have finished saving their RDDs
 *
 * @note All parts of the application need to check the `shuttingDown` flag and decide if they
 *       should continue working or not. For instance, state updates in `updateStateByKey`
 *       probably won't make sense, since the state saved on disk is what will be used on restart.
 *
 *       Speaking of restart, the application is responsible for loading the saved RDD and using
 *       it as `initialRDD` in `updateStateByKey`.
 */
class GracefulShutdown(ssc: StreamingContext, statePath: String) {
  /** Global flag to initiate graceful shutdown. */
  @volatile private var shuttingDown = false

  /** Global flag to confirm state was saved on graceful shutdown. */
  @volatile private var stateSaved: Set[DStream[_]] = Set.empty

  private val stateStreams: ListBuffer[DStream[_]] = ListBuffer.empty

  /**
   * Register given DStream for saving state on graceful shutdown.
   */
  def register[T](stateDStream: DStream[T]): Unit = {
    stateStreams += stateDStream

    stateDStream.foreachRDD { stateRDD =>
      if (shuttingDown && !stateSaved(stateDStream)) {
        stateRDD.saveAsObjectFile(statePath)
        stateSaved = stateSaved + stateDStream
      }
    }
  }

  def isShuttingDown(): Boolean = shuttingDown

  def shutdown() {
    println("Initiated shutdown sequence.")
    shuttingDown = true

    println("Waiting to save state RDD.")
    while (!stateSaved.sameElements(stateStreams))
      Thread.sleep(10)
    println("State was saved, continuing with Streaming shutdown.")

    ssc.stop(stopSparkContext = true, stopGracefully = true)
    println("Shutdown complete.")
  }
}

/**
 * Counts words cumulatively in UTF8 encoded, '\n' delimited text received from the network every
 * second starting with initial value of word count.
 * Usage: StatefulNetworkWordCount <hostname> <port>
 *   <hostname> and <port> describe the TCP server that Spark Streaming would connect to receive
 *   data.
 *
 * To run this on your local machine, you need to first run a Netcat server
 *    `$ nc -lk 9999`
 * and then run the example
 *    `$ bin/run-example
 *      org.apache.spark.examples.streaming.StatefulNetworkWordCount localhost 9999`
 */
object StatefulWordCount {

  val statePath = "state/stateRDD"
  var gracefulShutdown: GracefulShutdown = _

  var ssc: StreamingContext = _

  /** If there is an initial state, load the RDD, otherwise start with an empty state RDD. */
  def initialState(path: String): RDD[(String, Int)] = {
    if (path.isEmpty())
      ssc.sparkContext.parallelize(Seq.empty)
    else {
      ssc.sparkContext.objectFile(path)
    }
  }

  def main(args: Array[String]) {
    if (args.length < 2) {
      System.err.println("Usage: StatefulNetworkWordCount <hostname> <port>")
      System.exit(1)
    }

    val updateFunc = (values: Seq[Int], state: Option[Int]) => {
      // only process data if we're not in the middle of the shutdown procedure
      if (gracefulShutdown.isShuttingDown()) {
        println("Shutting down, skipping state update.")
        state
      } else {
        val currentCount = values.sum

        val previousCount = state.getOrElse(0)

        Some(currentCount + previousCount)
      }
    }

    val newUpdateFunc = (iterator: Iterator[(String, Seq[Int], Option[Int])]) => {
      iterator.flatMap { t => updateFunc(t._2, t._3).map(s => (t._1, s)) }
    }

    val sparkConf = new SparkConf()
      .setAppName("StatefulNetworkWordCount")
      .setMaster("local[*]")

    // Create the context with a 1 second batch size
    ssc = new StreamingContext(sparkConf, Seconds(1))
    ssc.checkpoint(".")

    gracefulShutdown = new GracefulShutdown(ssc, statePath)

    // Initial RDD input to updateStateByKey
    val initialRDD = initialState(statePath)

    // Create a ReceiverInputDStream on target ip:port and count the
    // words in input stream of \n delimited test (eg. generated by 'nc')
    val lines = ssc.socketTextStream(args(0), args(1).toInt)
    val words = lines.flatMap(_.split(" "))
    val wordDstream = words.map(x => (x, 1))

    // Update the cumulative count using updateStateByKey
    // This will give a Dstream made of state (which is the cumulative count of the words)
    val stateDstream = wordDstream.updateStateByKey[Int](newUpdateFunc,
      new HashPartitioner(ssc.sparkContext.defaultParallelism), true, initialRDD)

    stateDstream.print()
    ssc.start()

    // this will initiate shutdown in 10 seconds.
    BackgroundThread.start()

    ssc.awaitTermination()
  }

  object BackgroundThread extends Thread {
    override def run() {
      Thread.sleep(10000) // run for 10 seconds, then initiate graceful shutdown
      gracefulShutdown.shutdown()
    }
  }
}
